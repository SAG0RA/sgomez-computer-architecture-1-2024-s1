--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=8 LPM_WIDTH=3 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 8 
SUBDESIGN decode_61a
( 
	data[2..0]	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode2138w[3..0]	: WIRE;
	w_anode2156w[3..0]	: WIRE;
	w_anode2167w[3..0]	: WIRE;
	w_anode2178w[3..0]	: WIRE;
	w_anode2189w[3..0]	: WIRE;
	w_anode2200w[3..0]	: WIRE;
	w_anode2211w[3..0]	: WIRE;
	w_anode2222w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode2222w[3..3], w_anode2211w[3..3], w_anode2200w[3..3], w_anode2189w[3..3], w_anode2178w[3..3], w_anode2167w[3..3], w_anode2156w[3..3], w_anode2138w[3..3]);
	w_anode2138w[] = ( (w_anode2138w[2..2] & (! data_wire[2..2])), (w_anode2138w[1..1] & (! data_wire[1..1])), (w_anode2138w[0..0] & (! data_wire[0..0])), B"1");
	w_anode2156w[] = ( (w_anode2156w[2..2] & (! data_wire[2..2])), (w_anode2156w[1..1] & (! data_wire[1..1])), (w_anode2156w[0..0] & data_wire[0..0]), B"1");
	w_anode2167w[] = ( (w_anode2167w[2..2] & (! data_wire[2..2])), (w_anode2167w[1..1] & data_wire[1..1]), (w_anode2167w[0..0] & (! data_wire[0..0])), B"1");
	w_anode2178w[] = ( (w_anode2178w[2..2] & (! data_wire[2..2])), (w_anode2178w[1..1] & data_wire[1..1]), (w_anode2178w[0..0] & data_wire[0..0]), B"1");
	w_anode2189w[] = ( (w_anode2189w[2..2] & data_wire[2..2]), (w_anode2189w[1..1] & (! data_wire[1..1])), (w_anode2189w[0..0] & (! data_wire[0..0])), B"1");
	w_anode2200w[] = ( (w_anode2200w[2..2] & data_wire[2..2]), (w_anode2200w[1..1] & (! data_wire[1..1])), (w_anode2200w[0..0] & data_wire[0..0]), B"1");
	w_anode2211w[] = ( (w_anode2211w[2..2] & data_wire[2..2]), (w_anode2211w[1..1] & data_wire[1..1]), (w_anode2211w[0..0] & (! data_wire[0..0])), B"1");
	w_anode2222w[] = ( (w_anode2222w[2..2] & data_wire[2..2]), (w_anode2222w[1..1] & data_wire[1..1]), (w_anode2222w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
